// 参考：https://gitee.com/heyhaiyon/webpack5-config/
// npm i \
// clean-webpack-plugin html-webpack-plugin \
// style-loader css-loader less less-loader url-loader file-loader html-loader \
// postcss postcss-loader postcss-preset-env \
// mini-css-extract-plugin optimize-css-assets-webpack-plugin 
// eslint eslint-webpack-plugin @babel/core babel-loader @babel/preset-env 
// webpack-dev-server \
// -D

const path = require('path')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')
// const ESLintPlugin = require('eslint-webpack-plugin')
const commonCssLoader = [
    MiniCssExtractPlugin.loader,
    {
        loader: 'css-loader',
        options: {
            importLoaders: 1
        }
    },
    {
        loader: 'postcss-loader',
        options: {
            postcssOptions: {
                plugins: [require('postcss-preset-env')()]
            }
        }
    }
]

module.exports = {
    entry: './src/main.js',
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
        publicPath: '/'
    },
    module: {
        rules: [
            {
                test: /\.less$/,
                use: [...commonCssLoader, 'less-loader']
            },
            {
                test: /\.css$/,
                use: [...commonCssLoader]
            },
            {
                test: /\.(png|bmp|jpe?g|gif|webp|jfif)$/,
                use: [
                    {
                        loader: 'url-loader',
                        options: {
                            limit: 100 * 1024,
                            name: 'images/[name]_[hash:10].[ext]'
                        }
                    }
                ]
            },
            {
                test: /\.html$/,
                loader: 'html-loader'
            },
            {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: 'babel-loader'
            },
            {
                test: /\.ttf|eot|woff2?$/,
                loader: 'file-loader',
                options: {
                    outputPath: 'fonts'
                }
            }
        ]
    },
    plugins: [
        new CleanWebpackPlugin(),
        new HtmlWebpackPlugin({
            template: './src/index.html'
        }),
        new MiniCssExtractPlugin({
            filename: 'css/bundle.css'
        }),
        new OptimizeCssAssetsWebpackPlugin(),
        // new ESLintPlugin({
        //     fix: true,
        //     exclude: '/node_modules/',
        //     extensions: '.js'
        // })
    ],
    resolve: {
        extensions: ['.ts', '.js', '.cjs', '.json']
    },
    devServer: {
        watchContentBase: true,
        watchOptions: {
            ignored: /node_modules/
        },
        compress: true,
        port: 5000,
        host: 'localhost',
        open: true
    }
}
